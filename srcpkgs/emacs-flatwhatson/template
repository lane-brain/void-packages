# Template file for 'emacs-flatwhatson'
_git_sha=eeb94f39ded1a282f16a661a9e4576fa4b6510e7
pkgname=emacs-flatwhatson
version=28.0.50.${_git_sha:0:7}
revision=1
build_style=gnu-configure
configure_args="--with-file-notification=inotify --with-modules 
 --without-gconf --without-gsettings --with-nativecomp --with-gameuser=:games 
 $(vopt_with jpeg) $(vopt_with tiff) $(vopt_with gif) $(vopt_with png)
 $(vopt_with xpm) $(vopt_with svg rsvg) $(vopt_with imagemagick)
 $(vopt_with xml xml2) $(vopt_with gnutls) $(vopt_with sound) $(vopt_with m17n m17n-flt)
 $(vopt_with json) $(vopt_with harfbuzz) $(vopt_with cairo) $(vopt_with gmp libgmp)"
hostmakedepends="pkg-config tar automake texinfo git"
makedepends="ncurses-devel libXaw-devel gtk+-devel gtk+3-devel webkit2gtk-devel
 dbus-devel acl-devel libgccjit
 $(vopt_if jpeg libjpeg-turbo-devel) $(vopt_if tiff tiff-devel)
 $(vopt_if gif giflib-devel) $(vopt_if png libpng-devel) $(vopt_if xpm libXpm-devel)
 $(vopt_if svg librsvg-devel) $(vopt_if imagemagick libmagick-devel)
 $(vopt_if xml libxml2-devel) $(vopt_if gnutls gnutls-devel)
 $(vopt_if sound alsa-lib-devel) $(vopt_if m17n m17n-lib-devel)
 $(vopt_if json jansson-devel) $(vopt_if harfbuzz harfbuzz-devel)
 $(vopt_if cairo cairo-devel) $(vopt_if gmp gmp-devel)"
depends="emacs-flatwhatson-common-${version}_${revision}"
short_desc="GNU Emacs editor (pure-gtk & nativecomp)"
maintainer="lane-brain <lane@mailbox.org>"
license="GPL-3.0-or-later"
homepage="http://www.gnu.org/software/emacs/"
#distfiles="https://github.com/flatwhatson/emacs/archive/${_git_sha}.zip>${pkgname}-${_git_sha}.zip"
#checksum=897cb744a2cdba31bdb10d2d6d53f4da22ab1a13f9b4facac6b11894da3ffbf7
replaces="emacs>=0"
nocross=yes
nopie=yes
wrksrc="emacs-${_git_sha}"

# Package build options
build_options="nox x11 gtk2 gtk3 jpeg tiff gif png xpm svg xml imagemagick gnutls sound m17n dbus json harfbuzz cairo gmp lto fastboot"
desc_option_lto="Enable Link Time Optimization for build"
desc_option_xpm="Enable support for XPM images"
desc_option_sound="Enable support for sound"
desc_option_m17n="Enable support for m17n multilingual text processing"
#build_options_default="nox x11 gtk2 gtk3 jpeg tiff gif png xpm svg xml gnutls sound m17n json gmp"
build_options_default="nox gtk3 jpeg tiff gif png xpm svg xml gnutls sound m17n json gmp 
    imagemagick dbus nativecomp cairo harfbuzz"

do_fetch() {
    [[ -d ${wrksrc} ]] || git clone git://github.com/flatwhatson/emacs.git ${wrksrc}
    cd ${wrksrc} 
    [[ $(git rev-parse HEAD) == ${_git_sha} ]] || git checkout ${_git_sha}
}

pre_configure() {
    ./autogen.sh
    
	# Just configuring in different directories results in
	# spurious emacs rebuilds with incompatible build numbers.
	mkdir -p nox
	mv * nox || true
	cp -a nox x11
	cp -a nox gtk2
	cp -a nox gtk3
}

do_configure() {
	if [ "$build_option_nox" ]; then
		cd $wrksrc/nox
		./configure --without-x $(vopt_with dbus) ${configure_args}
	fi

	if [ "$build_option_x11" ]; then
		cd $wrksrc/x11
		./configure --with-x-toolkit=athena --without-toolkit-scroll-bars \
			$(vopt_with dbus) --without-gconf --without-gsettings \
			${configure_args}
	fi

	if [ "$build_option_gtk2" ]; then
		cd $wrksrc/gtk2
		./configure --with-x-toolkit=gtk2 ${configure_args}
	fi

	if [ "$build_option_gtk3" ]; then
		cd $wrksrc/gtk3
		./configure --with-x-toolkit=gtk3 --with-pgtk --with-xwidgets ${configure_args}
	fi
}

do_build() {
    ## Added from Arch PKGBUILD
    CFLAGS+=" -g" 
    CXXFLAGS+=" -g"
    
    if [[ "$build_option_lto" ]]; then
        CFLAGS+=" -flto"
        CXXFLAGS+=" -flto"
    fi

    export LD="/usr/bin/ld.gold"
    export CFLAGS+=" -fuse-ld=gold"
    export CXXFLAGS+=" -fuse-ld=gold"
    ## End Arch PKGBUILD adds
    
    if [ "$build_option_nox" ]; then
        if [[ "$build_option_fastboot" ]]; then
            make NATIVE_FAST_BOOT=1 ${makejobs} -C nox

        else
            make NATIVE_FULL_AOT=1 ${makejobs} -C nox
        fi
    fi

	if [ "$build_option_x11" ]; then
        if [[ "$build_option_fastboot" ]]; then
            make NATIVE_FAST_BOOT=1 ${makejobs} -C x11

        else
            make NATIVE_FULL_AOT=1 ${makejobs} -C x11
        fi
    fi

	if [ "$build_option_gtk2" ]; then
        if [[ "$build_option_fastboot" ]]; then
            make NATIVE_FAST_BOOT=1 ${makejobs} -C gtk2 

        else
            make NATIVE_FULL_AOT=1 ${makejobs} -C gtk2
        fi
    fi

	if [ "$build_option_gtk3" ]; then
        if [[ "$build_option_fastboot" ]]; then
            make NATIVE_FAST_BOOT=1 ${makejobs} -C gtk3

        else
            make NATIVE_FULL_AOT=1 ${makejobs} -C gtk3
        fi
    fi
}

do_install() {
	make DESTDIR=$DESTDIR -C ${wrksrc}/nox install
	rm -f ${DESTDIR}/usr/bin/ctags
	rm -f ${DESTDIR}/usr/lib/systemd/user/emacs.service
	rm -f ${DESTDIR}/usr/share/man/man1/ctags.1*
	rm -f ${DESTDIR}/usr/share/info/info.info
	rm -rf ${DESTDIR}/usr/share/applications
	rm -rf ${DESTDIR}/usr/share/icons
}

emacs-flatwhatson-common_package() {
	short_desc+=" - common files"
	archs=noarch
	provides="emacs-common-${version}_${revision}"
    replaces="emacs-common>=0"
    pkg_install() {
		vmove usr/share/emacs
		vmove usr/share/man
		vmove usr/share/info
		rm -f ${PKGDESTDIR}/usr/share/info/info.info.gz
	}
}

if [ "$build_option_x11" ]; then
	emacs-flatwhatson-x11_package() {
		depends="emacs-flatwhatson-common-${version}_${revision}"
		provides="emacs-${version}_${revision}"
		replaces="emacs>=0"
		short_desc+=" - X11 version"
		pkg_install() {
			make DESTDIR=${PKGDESTDIR} -C ${wrksrc}/x11 install
			rm -f ${PKGDESTDIR}/usr/bin/ctags
			rm -rf ${PKGDESTDIR}/usr/share
			rm -rf ${PKGDESTDIR}/usr/lib
		}
	}
fi

if [ "$build_option_gtk2" ]; then
	emacs-flatwhatson-gtk2_package() {
		depends="emacs-flatwhatson-common-${version}_${revision} desktop-file-utils hicolor-icon-theme"
		provides="emacs-${version}_${revision}"
		replaces="emacs>=0"
		short_desc+=" - GTK+2 version"
		pkg_install() {
			make DESTDIR=${PKGDESTDIR} -C ${wrksrc}/gtk2 install
			rm -f ${PKGDESTDIR}/usr/bin/ctags
			rm -rf ${PKGDESTDIR}/usr/share/{emacs,man,info}
			rm -rf ${PKGDESTDIR}/usr/lib
		}
	}
fi

if [ "$build_option_gtk3" ]; then
	emacs-flatwhatson-gtk3_package() {
		depends="emacs-flatwhatson-common-${version}_${revision} desktop-file-utils hicolor-icon-theme"
		provides="emacs-${version}_${revision}"
		replaces="emacs>=0"
		short_desc+=" - GTK+3 version"
		pkg_install() {
			make DESTDIR=${PKGDESTDIR} -C ${wrksrc}/gtk3 install
			rm -f ${PKGDESTDIR}/usr/bin/ctags
			rm -rf ${PKGDESTDIR}/usr/share/{emacs,man,info}
			rm -rf ${PKGDESTDIR}/usr/lib
		}
}
fi
